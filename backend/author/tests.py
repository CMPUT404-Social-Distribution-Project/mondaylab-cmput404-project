from django.test import TestCase
from .models import Author
from rest_framework.test import APITestCase, APIClient
from rest_framework_simplejwt.tokens import RefreshToken
from uuid import uuid4


class AuthorTestCase(APITestCase):
    def setUp(self):
        self.displayName = "test"
        self.password = "testtest"
        self.user_info = {'displayName': self.displayName, 'password': self.password}
        self.client = APIClient()

        # Register the mock author using /register/ endpoint as this properly setups
        # the token in the backend so that the two tokens (the token given to the client
        # and the token that the backend keeps in a "whitelist") can be checked against each
        # other. Using self.client.credentials(HTTP_AUTHORIZATION=refresh.access_token)
        # with refresh = RefreshToken.for_user(mock_author) would not work because
        # mock_author would be created with Author.objects.create_user() which does
        # not register a JWT for mock_author on the server. So what ends up happening
        # in this situation is that a token is generated by RefreshToken.for_user(mock_author)
        # but it is not registered in the server so the server says "idk what this is" and gives
        # a 401.
        response = self.client.post(f'/service/auth/register/', self.user_info , format="json")
        self.assertEqual(response.status_code, 201)
        res_data = response.data
        self.assertTrue('token' in res_data.keys())
        self.authorization = f'Bearer {res_data.get("token")}'
        self.mock_author = Author.objects.get(displayName=self.displayName)


    def testCreateAuthor(self):
        Author.objects.create(displayName="Author")
        author1 = Author.objects.get(displayName="Author")

        self.assertEqual(author1.displayName, "Author")
    
    def testGetAuthor(self):
        Author.objects.create(displayName="Author2")
        author2 = Author.objects.get(displayName="Author2")
        url = f'/service/authors/{author2.uuid}/'

        res = self.client.get(url, format="json")
        self.assertEqual(res.status_code, 200)
        res = res.data
        # check that all the fields needed are present
        self.assertTrue('id' in res.keys())
        self.assertTrue('url' in res.keys())
        self.assertTrue('host' in res.keys())
        self.assertTrue('github' in res.keys())
        self.assertTrue('profileImage' in res.keys())
        self.assertTrue('displayName' in res.keys())
        self.assertTrue('type' in res.keys())

    def testGet404(self):
        # should get 404 when getting a non existent user
        # dunno why it's 301...is fine in web browser
        url = f'/service/authors/{uuid4()}'
        res = self.client.get(url, format="json")
        self.assertEqual(res.status_code, 404)

    def testUpdateAuthorNoAuthorization(self):
        # should be able to GET author fine since method is public
        url = f'/service/authors/{self.mock_author.uuid}/'
        res = self.client.get(url, format="json")
        self.assertEqual(res.status_code, 200)

        # No authorization header added, should get 401
        update_res = self.client.post(url, {'displayName': 'AuthorPatched'})
        self.assertEqual(update_res.status_code, 401)

    def testUpdateAuthor(self):
        url = f'/service/authors/{self.mock_author.uuid}/'
        res = self.client.get(url, format="json")
        self.assertEqual(res.status_code, 200)

        # update author with new display name
        update_res = self.client.post(url, {'displayName': 'AuthorPatched'}, HTTP_AUTHORIZATION=self.authorization)
        self.assertEqual(update_res.status_code, 202)

        # get author again and see if it really did update
        res = self.client.get(url, format="json")
        self.assertEqual(res.status_code, 200)
        self.assertEqual(res.data.get('displayName'), 'AuthorPatched')



class AuthorsTestCase(TestCase):
    NUM_AUTHORS = 5     # should only show 5 authors at a time when specified

    def testGetAuthors(self):
        url = f'/service/authors/?page=1&size={self.NUM_AUTHORS}'
        Author.objects.create(displayName="Author1")
        Author.objects.create(displayName="Author2")
        Author.objects.create(displayName="Author3")
        Author.objects.create(displayName="Author4")
        Author.objects.create(displayName="Author5")
        Author.objects.create(displayName="Author6")

        # shouldn't need authentication
        res = self.client.get(url, format="json")
        numAuthors = len(res.data.get("items"))
        self.assertEqual(res.status_code, 200)
        self.assertEqual(numAuthors, self.NUM_AUTHORS)
        self.assertEqual(res.data.get('type'), 'authors')

    def testPostAuthorsUnauthorized(self):
        # tests without authorization
        url = f'/service/authors/'
        res = self.client.post(url, format="json")
        self.assertEqual(res.status_code, 401)
